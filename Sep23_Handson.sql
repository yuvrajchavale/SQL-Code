Create database Sep23
use Sep23

--1. Display the number of states present in the Location Table.

Select * from Location

Select Count (Distinct State) as No_of_State from Location

--2. How many products are of regular type?
Select * from Product

Select COUNT(Product) as No_of_Regular from Product
where Type ='Regular'

--3.How much spending has been done on marketing of product ID 1?

Select SUM(Marketing) AS Spending from Fact
where ProductId=1

--4. What is the minimum sales of a product?

Select Product, Sales from Fact
full outer join
Product
on 
Fact.ProductId=Product.ProductId
where Sales = (Select MIN(Sales) from Fact)

--5. Display the max Cost of Good Sold (COGS). 

Select MAX (COGS) as Maximum_COGS from Fact

--6. Display the details of the product where product type is coffee.

Select * from Product
where Product_Type = 'Coffee'

--7. Display the details where total expenses is greater than 40

Select * from Fact
where Total_Expenses > 40
order by Total_Expenses

--8. Average sales in area code 719?

Select AVG(Sales) from Fact
Where Area_Code = 719

--or

Select Area_Code, Avg(Sales) as Average_Sales from Fact
group by Area_Code
having Area_Code =719

--or

Select Area_Code, Avg(Sales) as Average_Sales from Fact
where Area_code = 719 
group by Area_Code

--9. Find out the total profit generated by Colorado state.

Select State, SUM(Profit) as Total_Profit from Fact F
full outer join
Location L
on
F.Area_Code = L.Area_Code
group by State
having State = 'Colorado'

--10. Average inventory for each productid

Select ProductId, Avg(Inventory) as Average_Inventory from Fact
group by ProductID
order by ProductId

--16. Rank without any gap

Select Sales, DENSE_RANK()Over(Order by Sales desc) as Sales_RANK
from Fact

--Reference

Select Sales, RANK()Over(Order by Sales desc) as Sales_RANK
from Fact

--19.

--21. Using stored procedure to fetch the result according to the
--product type from product table

Select * from Product

--Procedure Creation

Create procedure Product_Proc (@input varchar(20)) --input declaration
as
	select * from Product where Product_type = @input

--execute (Programmability --> Stored Procedure)
Exec Product_Proc 'Tea'
Exec Product_Proc 'Espresso'

/*22. Write a query by creating a condition in which 
if the total expenses is less than 60 then it is a profit or else loss. */

Select Total_Expenses,
Case
when Total_Expenses < 60 then 'Profit'
when Total_Expenses > 60 then 'Loss'
When Total_Expenses = 0 then 'Neither Profit nor Loss'
end as Total_Expenses_Status
from Fact

/*23. Give the total weekly sales value with the date and product ID details. 
Use roll-up to pull the data in hierarchical order.*/

Select Date, ProductID, SUM (datepart(week,Sales)) as Total_Weekly_Sales
from Fact
group by Date, ProductId
with rollup

--or

Select Datepart (week,Date) as Weekly, ProductID, SUM (datepart(week,Sales)) as Total_Weekly_Sales
from Fact
group by Date, ProductId
with rollup

/*24. Apply union and intersection operator on the tables which consist of
attribute area code. */

Select Area_code from Fact
union
Select Area_code from Location

Select Area_code from Fact
intersect
Select Area_code from Location

/*25. Create a user-defined function for the product table to fetch a particular
product type based upon the user’s preference.*/

Create function Product_fn (@input varchar(20)) --input declaration
returns table --output declaration
	return 
	select * from Product 
	where Product_Type=@input

--Calling function
Select * from dbo.Product_fn ('Tea')
Select * from dbo.Product_fn ('Coffee')

/*26. Change the product type from coffee to tea where product ID is 1
and undo it. */

begin tran
update Product set Product_type='Tea'
where ProductId=1

Select * from Product

rollback tran

/*27. Display the date, product ID and sales where total expenses are
between 100 to 200.

--28. Delete the records in the Product Table for regular type. */


--29. Display the ASCII value of the fifth character from the columnProduct.
Select     Product,	Substring(Product,1,5) as 'Fifth Word ',	Ascii(Reverse(Left(Product,5))) as 'Ascii Value'	From Product
Select     Product,	ASCII(Substring(Product,5,1) )as 'Fifth Word '	From Product

